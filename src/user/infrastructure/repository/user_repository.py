from typing import Optional
from sqlalchemy import select, update, delete
from sqlalchemy.exc import NoResultFound
from src.shared.value_objects.language import Language
from src.shared.value_objects.user_id import UserId
from src.shared.enum import UserProvider
from src.entry.models import Users as User  # SQLAlchemy model
from src.user.infrastructure.models import User as UserModel
from src.user.application.repository.contracts import IUserRepository
from src.user.domain.contracts import IUser  # Interface or Base class
from src.entry.db import get_session
from uuid import UUID

class UserRepository(IUserRepository):
    def __init__(self, model=User):
        self.model = model

    async def find_by_id(self, user_id: UserId) -> IUser:
        session = get_session()
        stmt = select(self.model).where(self.model.id == str(user_id))
        result = await session.execute(stmt)
        user = result.scalar_one_or_none()
        if not user:
            raise ValueError(f"User with ID {user_id} not found")
        return UserModel(
            id=user.id if isinstance(user.id, UUID) else UUID(str(user.id)),
            name=user.name,
            email=user.email,
            password=user.password,
            profile_completed=user.profile_completed,
            user_language=Language(user.user_language),
            learning_language=Language(user.learning_language)
        )

    async def find_by_email(self, email: str) -> Optional[IUser]:
        session = get_session()
        stmt = select(self.model).where(self.model.email == email)
        result = await session.execute(stmt)
        user =  result.scalar_one_or_none()
        if not user:
            return None
        return UserModel(
            id=user.id if isinstance(user.id, UUID) else UUID(str(user.id)),
            name=user.name,
            email=user.email,
            password=user.password,
            profile_completed=user.profile_completed,
            user_language=Language(user.user_language),
            learning_language=Language(user.learning_language)
        )

    async def create(self, attributes: dict) -> IUser:
        session = get_session()
        user = self.model(**attributes)
        session.add(user)
        await session.flush()  # flush to get autogenerated fields
        return user

    async def delete(self, user_id: UserId) -> None:
        session = get_session()
        stmt = delete(self.model).where(self.model.id == str(user_id))
        await session.execute(stmt)

    async def exists_by_provider(self, provider_id: str, provider: UserProvider) -> bool:
        session = get_session()
        stmt = (
            select(self.model)
            .where(self.model.provider_id == provider_id)
            .where(self.model.provider_type == provider)
        )
        result = await session.execute(stmt)
        return result.scalar_one_or_none() is not None

    async def find_by_provider(self, provider_id: str, provider: UserProvider) -> IUser:
        session = get_session()
        stmt = (
            select(self.model)
            .where(self.model.provider_id == provider_id)
            .where(self.model.provider_type == provider)
        )
        result = await session.execute(stmt)
        user = result.scalar_one_or_none()
        if not user:
            raise ValueError(
                f"User with provider_id {provider_id} and provider {provider.value} not found"
            )
        return UserModel(
            id=user.id if isinstance(user.id, UUID) else UUID(str(user.id)),
            name=user.name,
            email=user.email,
            password=user.password,
            profile_completed=user.profile_completed,
            user_language=Language(user.user_language),
            learning_language=Language(user.learning_language)
        )

    async def update(self, user: IUser) -> None:
        session = get_session()
        stmt = (
            update(self.model)
            .where(self.model.id == str(user.get_id()))
            .values(
                email=user.get_email(),
                name=user.get_name(),
                password=user.get_password(),
                user_language=user.get_user_language().get_value(),
                learning_language=user.get_learning_language().get_value(),
                profile_completed=user.profile_completed(),
            )
        )
        await session.execute(stmt)
