"""add phone column to users

Revision ID: 69fff129170a
Revises: 5d899f02f9f0
Create Date: 2025-10-22 15:52:37.962730

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '69fff129170a'
down_revision: Union[str, Sequence[str], None] = '5d899f02f9f0'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('telescope_entries_tags_tag_index'), table_name='telescope_entries_tags')
    op.drop_table('telescope_entries_tags')
    op.drop_table('telescope_monitoring')
    op.drop_index(op.f('telescope_entries_batch_id_index'), table_name='telescope_entries')
    op.drop_index(op.f('telescope_entries_created_at_index'), table_name='telescope_entries')
    op.drop_index(op.f('telescope_entries_family_hash_index'), table_name='telescope_entries')
    op.drop_index(op.f('telescope_entries_type_should_display_on_index_index'), table_name='telescope_entries')
    op.drop_table('telescope_entries')
    op.add_column('users', sa.Column('phone', sa.String(length=20), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('users', 'phone')
    op.create_table('telescope_entries',
    sa.Column('sequence', sa.BIGINT(), server_default=sa.text("nextval('telescope_entries_sequence_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('uuid', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('batch_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('family_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('should_display_on_index', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=0), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('sequence', name='telescope_entries_pkey'),
    sa.UniqueConstraint('uuid', name='telescope_entries_uuid_unique', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('telescope_entries_type_should_display_on_index_index'), 'telescope_entries', ['type', 'should_display_on_index'], unique=False)
    op.create_index(op.f('telescope_entries_family_hash_index'), 'telescope_entries', ['family_hash'], unique=False)
    op.create_index(op.f('telescope_entries_created_at_index'), 'telescope_entries', ['created_at'], unique=False)
    op.create_index(op.f('telescope_entries_batch_id_index'), 'telescope_entries', ['batch_id'], unique=False)
    op.create_table('telescope_monitoring',
    sa.Column('tag', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('tag', name=op.f('telescope_monitoring_pkey'))
    )
    op.create_table('telescope_entries_tags',
    sa.Column('entry_uuid', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('tag', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['entry_uuid'], ['telescope_entries.uuid'], name=op.f('telescope_entries_tags_entry_uuid_foreign'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('entry_uuid', 'tag', name=op.f('telescope_entries_tags_pkey'))
    )
    op.create_index(op.f('telescope_entries_tags_tag_index'), 'telescope_entries_tags', ['tag'], unique=False)
    # ### end Alembic commands ###
